<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GAS（Google Apps Script）について｜JavaScript学習の記録</title>
    <link rel="stylesheet" href="../../assets/css/style.css">
</head>

<body>
    <!-- ナビゲーションバー -->
    <header>
        <nav>
            <ul>
                <li><a href="#learning">学んだ内容</a></li>
                <li><a href="#projects">制作物</a></li>
            </ul>
        </nav>
    </header>

    <!-- ヒーローセクション -->
    <section id="hero">
        <h1>GAS（Google Apps Script）について</h1>
        <p>GAS（Google Apps Script）についてまとめたページです。</p>
    </section>

    <section>
        <h2>GAS（Google Apps Script）とは？</h2>
        <ul>
            <li>Googleが提供するJavaScriptで操作・自動化できるクラウド上のスクリプト環境です。</li>
        </ul>
    </section>

    <section>
        <h2>コメント</h2>
        <ul>
            <li>コメントはホワイトスペースのように扱われ、スクリプトの実行から除外される</li>
            <li>行コメント
                <pre>// 一行のコメントは先頭に記号を付ける</pre>
            </li>
            <li>ブロックコメント
                <pre>/* 複数行からなる コメントを囲む */</pre>
            </li>
            <li>ハッシュバンコメント
                <pre>#! /usr/bin/env node</pre>
                で始まることと、スクリプトやモジュールの絶対的な開始位置でのみ有効であることを除いて、単一の行のみ (//) のコメントと全く同じように動作する。スクリプトの実行に使用したい特定の
                JavaScript エンジンへのパスを指定するのに使用される特殊なコメント。
            </li>
        </ul>
    </section>

    <section>
        <h2>宣言</h2>
        <ul>
            <li>変数を宣言する方は3種類
                <ul>
                    <li>var：変数を宣言し、ある値に初期化することもできる。</li>
                    <li>let：ブロックスコープのローカル変数を宣言し、ある値に初期化することもできる。</li>
                    <li>const：ブロックスコープで読み取り専用の名前付き定数を宣言する。</li>
                </ul>
            </li>
        </ul>
    </section>

    <section>
        <h2>変数</h2>
        <ul>
            <li>変数はデータを格納し参照するための識別子</li>
            <li>文字、アンダースコア (_)、あるいはドル記号 ($) から始まる。続く文字には数字 (0–9) も使用できる</li>
        </ul>
    </section>

    <section>
        <h2>変数の宣言</h2>
        <ul>
            <li>変数は使用する前に常に宣言する</li>
            <li>変数を宣言する方法は2通り
                <ul>
                    <li>var：ローカル変数とグローバル変数の両方の宣言に使用できる</li>
                    <li>const / let：ブロックスコープのローカル変数を宣言することができる</li>
                </ul>
            </li>
            <li>複数の変数を宣言することもできる
                <pre>const foo = { bar1: 'sample001', bar2: 'sample002' };</pre>
            </li>
        </ul>
    </section>

    <section>
        <h2>宣言と初期化</h2>
        <p>let x = 42 では、let x の部分が宣言、= 42 の部分は初期化子と呼ばれる</p>
        <p>var と let の宣言では、初期化子はオプション。もし変数が初期化子なしで宣言された場合、その変数には undefined という値が代入される。</p>
        <p>const の宣言では常に初期化子が必要</p>
    </section>

    <section>
        <h2>変数のスコープ</h2>
        <ul>
            <li>変数は以下のスコープのいずれかに所属する
                <ul>
                    <li>グローバルスコープ：スクリプトモードで実行するすべてのコードの既定のスコープ。</li>
                    <li>モジュールスコープ：モジュールモードで実行されるコードのスコープです。</li>
                    <li>関数スコープ：関数で作成されるスコープです。</li>
                    <li>ブロックスコープ: 波括弧の組で生成されるスコープ（let または const）</li>
                </ul>
            </li>
        </ul>
    </section>

    <section>
        <h2>変数の巻き上げ</h2>
        <p>変数の宣言がそのスコープの先頭に移動するように見えるプロセスを指す。</p>
        <pre>console.log(x); // ReferenceError
const x = 3;</pre>
    </section>

    <section>
        <h2>グローバル変数</h2>
        <p>グローバルオブジェクトのプロパティ。ウェブページでのグローバルオブジェクトは window です。</p>
        <pre>window.変数名 (例：window.console)</pre>
    </section>

    <section>
        <h2>定数</h2>
        <ul>
            <li>定数の値は宣言時に設定され、その後再代入ができない</li>
            <li>constを使う</li>
            <li>同一スコープ内で関数や変数と同じ名前の定数を宣言はできない</li>
            <li>定数がオブジェクトの場合、プロパティを追加・更新・削除ができる</li>
        </ul>
        <pre>const MY_ARRAY = ["aaa", "bbb"];
MY_ARRAY.push("ccc");
console.log(MY_ARRAY); // ['aaa', 'bbb', 'ccc'];</pre>
    </section>

    <section>
        <h2>データ構造とデータ型</h2>
        <p>データ型の定義は8つ
        <ul>
            <li>Boolean（論理値）：true または false</li>
            <li>null：null 値を意味する特殊なキーワード</li>
            <li>undefined（未定義）：値が未定義の最上位プロパティ</li>
            <li>Number（数値）：整数または浮動小数点数</li>
            <li>BigInt（長整数）：精度が自由な整数値</li>
            <li>String（文字列）：テキストの値を表す連続した文字</li>
            <li>Symbol（シンボル）：インスタンスが固有で不変となるデータ型</li>
            <li>Object（オブジェクト）：データとそのデータをやり取りするための命令が入ったデータ構造</li>
        </ul>
        </p>
    </section>

    <section>
        <h2>データ型の変換</h2>
        <ul>
            <li>変数宣言時にデータ型を指定する必要がない</li>
            <li>スクリプト実行時に必要に応じてデータ型が自動的に変換される</li>
        </ul>
        <pre>const x = "答えは " + 1 + 2;
console.log(x); // "答えは 12"
const y = 1 + 2;
console.log(y); // "3"</pre>
    </section>
    </section>

    <!-- フッター -->
    <footer>
        <p>&copy; 2025 JavaScript学習の記録</p>
    </footer>
</body>

</html>